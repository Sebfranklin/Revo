# 🚀 Complete Deployment Guide - Trixel AI Backend Migration

## 📋 What You've Accomplished

You're moving from an **insecure** frontend-only setup to a **professional, secure** backend architecture. Your API key will now be hidden on the server, and you'll be using Google's Gemini 2.5 Flash model.

---

## 📁 Step 1: Project Structure

Your project needs this exact folder structure:

```
trixel-tech/
├── api/
│   └── chat.js          ← NEW: Your secure backend
├── index.html           ← Existing (no changes needed)
├── script.js            ← REPLACE with updated version
├── package.json         ← NEW: Backend dependencies
└── (other files)
```

### Actions:
1. Create a folder named `api` in your project root
2. Inside `api`, create a file named `chat.js`
3. Create `package.json` in your project root (not inside `api`)

---

## 🔑 Step 2: Get Your Google Gemini API Key

1. Go to [Google AI Studio](https://aistudio.google.com/app/apikey)
2. Sign in with your Google account
3. Click **"Get API key"** → **"Create API key in new project"**
4. Copy the key (it starts with `AIza...`)
5. **Save it somewhere safe** - you'll need it for Vercel

---

## 💻 Step 3: Implement the Code

### A. Backend Code (`api/chat.js`)

Copy the code from the "api/chat.js - Secure Backend" artifact I created above into your `api/chat.js` file.

**Key Features:**
- Uses `@google/generative-ai` library
- Reads API key from environment variables (`process.env.GEMINI_API_KEY`)
- Handles CORS properly
- Returns JSON responses

### B. Dependencies (`package.json`)

Copy the code from the "package.json - Dependencies" artifact into your project root.

**What it does:**
- Lists the Google AI library as a dependency
- Tells Vercel what to install

### C. Frontend Update (`script.js`)

**CRITICAL:** Replace your entire `script.js` with the "Updated script.js - Secure Frontend" artifact.

**Major changes:**
- ❌ **REMOVED:** The entire `AI_CONFIG` object with your API key
- ✅ **ADDED:** New `fetchAIResponse()` that calls `/api/chat`
- ✅ **UPDATED:** `conversationHistory` now uses Gemini's format: `{ role: "user", parts: [{ text: "..." }] }`

---

## 🌐 Step 4: Deploy to Vercel

### A. Push to GitHub

```bash
# In your project folder
git add .
git commit -m "Migrate to secure backend with Gemini API"
git push origin main
```

### B. Deploy on Vercel

1. Go to [vercel.com](https://vercel.com)
2. Sign up/login with GitHub
3. Click **"Add New..." → "Project"**
4. Select your `trixel-tech` repository
5. Vercel will auto-detect settings - don't change anything
6. **BEFORE clicking Deploy:**

### C. Add Environment Variable (CRITICAL!)

In the Vercel project settings:

1. Find **"Environment Variables"** section
2. Add a new variable:
   - **Name:** `GEMINI_API_KEY`
   - **Value:** Your Google AI Studio API key (the one you copied earlier)
   - **Environment:** All (Production, Preview, Development)
3. Click **"Add"**

### D. Deploy

1. Click **"Deploy"**
2. Wait 1-2 minutes for the build to complete
3. You'll get a live URL like `https://trixel-tech.vercel.app`

---

## ✅ Step 5: Testing Your Deployment

### Test the AI Chat:

1. Visit your new Vercel URL
2. Click the AI chat button (blue orb, bottom-right)
3. Type: "Tell me about your services"
4. You should get a response in 2-3 seconds

### What to Check:

✅ Chat opens properly  
✅ AI responds (not an error message)  
✅ Response is in the "Jordan Belfort" personality style  
✅ No API key visible in browser DevTools → Network tab

---

## 🐛 Troubleshooting

### Issue: "Failed to fetch AI response"

**Solution:** Check Vercel environment variables
- Go to your Vercel project → Settings → Environment Variables
- Verify `GEMINI_API_KEY` is set correctly
- Redeploy: Settings → Deployments → (3 dots) → Redeploy

### Issue: "API key configuration error"

**Solution:** Your `GEMINI_API_KEY` environment variable is missing or incorrect
- Double-check the key in Google AI Studio
- Re-add it in Vercel settings
- Make sure it's applied to "All" environments

### Issue: CORS error in browser console

**Solution:** This shouldn't happen with the code I provided, but if it does:
- Check that your `api/chat.js` file has the CORS headers
- Try redeploying

### Issue: Chat history not saving

**Solution:** This is a localStorage issue (unrelated to backend)
- Clear browser cache and try again
- Check browser console for errors

---

## 🔒 Security Wins

✅ **API key is now server-side only** - no one can steal it from your frontend  
✅ **Environment variables** - API key never appears in code  
✅ **Vercel serverless functions** - automatic scaling, no server management  
✅ **CORS protection** - only your domain can call the API  

---

## 📊 Monitoring & Costs

### Vercel (Free Tier):
- ✅ 100GB bandwidth/month
- ✅ Unlimited API requests
- ✅ Automatic HTTPS

### Google Gemini API (Free Tier):
- ✅ 1,500 requests per day
- ✅ 1 million tokens per month
- ✅ More than enough for your portfolio site

**You won't pay anything unless you get massive traffic!**

---

## 🎯 Next Steps (Optional Improvements)

1. **Add rate limiting** to prevent abuse
2. **Cache responses** for common questions
3. **Add analytics** to track AI usage
4. **Custom domain** instead of `.vercel.app`

---

## 📞 Need Help?

If something doesn't work:

1. Check Vercel deployment logs (click on deployment → View Function Logs)
2. Open browser DevTools → Console tab for frontend errors
3. Verify all 3 files are in the correct locations
4. Make sure you pushed everything to GitHub before deploying

---

## ✨ You're Done!

Your AI chatbot is now:
- ✅ Secure (API key hidden)
- ✅ Professional (backend architecture)
- ✅ Scalable (serverless)
- ✅ Free (within limits)

Welcome to professional web development! 🎉